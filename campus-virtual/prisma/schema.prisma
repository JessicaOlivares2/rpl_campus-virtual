// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int               @id @default(autoincrement())
  email         String            @unique
  password      String
  name          String
  lastName      String
  DNI           String
  birthDate     DateTime
  role          Role              @default(STUDENT)
  commissionId  Int?
  commission    Commission?       @relation(fields: [commissionId], references: [id])
  coursesJoined Course[]
  progresses    StudentProgress[]
  submissions   Submission[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String
  email     String   @unique
  password  String   
  courses   Course[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  slug         String 
  description String?
  teacherId   Int
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  commissions Commission[]
  modules     Module[]
  students    User[] // This is the missing field. It completes the many-to-many relationship with User.
}

model Commission {
  id               Int      @id @default(autoincrement())
  name             String
  registrationCode String   @unique
  students         User[]
  courses          Course[]
}

model Module {
  id          Int          @id @default(autoincrement())
  title       String
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  assignments Assignment[]
}

model Assignment {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  slug          String            @unique // Debe seguir aquí
  moduleId    Int
  module      Module            @relation(fields: [moduleId], references: [id])
  type        String // 'Lesson', 'Quiz', 'Project'
  progress    StudentProgress[]
  resources       Resource[]
  testFiles   TestFile[]
  submissions Submission[]
}

model TestFile {
  id           Int      @id @default(autoincrement())
  filename     String   // Nombre del archivo (ej: test_unitario_1.py)
  storagePath  String   // Ruta donde se guarda el archivo en el servidor/S3
  assignmentId Int
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
}

model Submission {
  id             Int       @id @default(autoincrement())
  codeSubmitted  String    // El código fuente que el alumno envió
  submittedAt    DateTime  @default(now())
  isSuccessful   Boolean?  // Resultado final: true (Pasa) / false (Falla) / null (Pendiente)
  executionTimeMs Int?     // Para medir el rendimiento (< 5 segundos)

  studentId      Int
  student        User      @relation(fields: [studentId], references: [id])

  assignmentId   Int
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
}

model StudentProgress {
  id             Int       @id @default(autoincrement())
  studentId      Int
  assignmentId   Int
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
  student        User      @relation(fields: [studentId], references: [id])
  isCompleted    Boolean   @default(false)
  completionDate DateTime?

  @@unique([studentId, assignmentId])
}

enum Role {
  STUDENT
  TEACHER
}
model Resource {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String   // Ej: 'PDF', 'Link', 'Video'
  url         String   // URL o ruta al archivo
  assignmentId Int
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
}